// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ibc/core/channel/v1/channel.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Channel {
    // message fields
    pub state: State,
    pub ordering: Order,
    pub counterparty: ::protobuf::SingularPtrField<Counterparty>,
    pub connection_hops: ::protobuf::RepeatedField<::std::string::String>,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Channel {
    fn default() -> &'a Channel {
        <Channel as ::protobuf::Message>::default_instance()
    }
}

impl Channel {
    pub fn new() -> Channel {
        ::std::default::Default::default()
    }

    // .ibc.core.channel.v1.State state = 1;


    pub fn get_state(&self) -> State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = State::STATE_UNINITIALIZED_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: State) {
        self.state = v;
    }

    // .ibc.core.channel.v1.Order ordering = 2;


    pub fn get_ordering(&self) -> Order {
        self.ordering
    }
    pub fn clear_ordering(&mut self) {
        self.ordering = Order::ORDER_NONE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_ordering(&mut self, v: Order) {
        self.ordering = v;
    }

    // .ibc.core.channel.v1.Counterparty counterparty = 3;


    pub fn get_counterparty(&self) -> &Counterparty {
        self.counterparty.as_ref().unwrap_or_else(|| <Counterparty as ::protobuf::Message>::default_instance())
    }
    pub fn clear_counterparty(&mut self) {
        self.counterparty.clear();
    }

    pub fn has_counterparty(&self) -> bool {
        self.counterparty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_counterparty(&mut self, v: Counterparty) {
        self.counterparty = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty(&mut self) -> &mut Counterparty {
        if self.counterparty.is_none() {
            self.counterparty.set_default();
        }
        self.counterparty.as_mut().unwrap()
    }

    // Take field
    pub fn take_counterparty(&mut self) -> Counterparty {
        self.counterparty.take().unwrap_or_else(|| Counterparty::new())
    }

    // repeated string connection_hops = 4;


    pub fn get_connection_hops(&self) -> &[::std::string::String] {
        &self.connection_hops
    }
    pub fn clear_connection_hops(&mut self) {
        self.connection_hops.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_hops(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.connection_hops = v;
    }

    // Mutable pointer to the field.
    pub fn mut_connection_hops(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.connection_hops
    }

    // Take field
    pub fn take_connection_hops(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.connection_hops, ::protobuf::RepeatedField::new())
    }

    // string version = 5;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Channel {
    fn is_initialized(&self) -> bool {
        for v in &self.counterparty {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.ordering, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.counterparty)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.connection_hops)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != State::STATE_UNINITIALIZED_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if self.ordering != Order::ORDER_NONE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.ordering);
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.connection_hops {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != State::STATE_UNINITIALIZED_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if self.ordering != Order::ORDER_NONE_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.ordering))?;
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.connection_hops {
            os.write_string(4, &v)?;
        };
        if !self.version.is_empty() {
            os.write_string(5, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Channel {
        Channel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<State>>(
                "state",
                |m: &Channel| { &m.state },
                |m: &mut Channel| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Order>>(
                "ordering",
                |m: &Channel| { &m.ordering },
                |m: &mut Channel| { &mut m.ordering },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Counterparty>>(
                "counterparty",
                |m: &Channel| { &m.counterparty },
                |m: &mut Channel| { &mut m.counterparty },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connection_hops",
                |m: &Channel| { &m.connection_hops },
                |m: &mut Channel| { &mut m.connection_hops },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &Channel| { &m.version },
                |m: &mut Channel| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Channel>(
                "Channel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Channel {
        static instance: ::protobuf::rt::LazyV2<Channel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Channel::new)
    }
}

impl ::protobuf::Clear for Channel {
    fn clear(&mut self) {
        self.state = State::STATE_UNINITIALIZED_UNSPECIFIED;
        self.ordering = Order::ORDER_NONE_UNSPECIFIED;
        self.counterparty.clear();
        self.connection_hops.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Channel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Channel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IdentifiedChannel {
    // message fields
    pub state: State,
    pub ordering: Order,
    pub counterparty: ::protobuf::SingularPtrField<Counterparty>,
    pub connection_hops: ::protobuf::RepeatedField<::std::string::String>,
    pub version: ::std::string::String,
    pub port_id: ::std::string::String,
    pub channel_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdentifiedChannel {
    fn default() -> &'a IdentifiedChannel {
        <IdentifiedChannel as ::protobuf::Message>::default_instance()
    }
}

impl IdentifiedChannel {
    pub fn new() -> IdentifiedChannel {
        ::std::default::Default::default()
    }

    // .ibc.core.channel.v1.State state = 1;


    pub fn get_state(&self) -> State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = State::STATE_UNINITIALIZED_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: State) {
        self.state = v;
    }

    // .ibc.core.channel.v1.Order ordering = 2;


    pub fn get_ordering(&self) -> Order {
        self.ordering
    }
    pub fn clear_ordering(&mut self) {
        self.ordering = Order::ORDER_NONE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_ordering(&mut self, v: Order) {
        self.ordering = v;
    }

    // .ibc.core.channel.v1.Counterparty counterparty = 3;


    pub fn get_counterparty(&self) -> &Counterparty {
        self.counterparty.as_ref().unwrap_or_else(|| <Counterparty as ::protobuf::Message>::default_instance())
    }
    pub fn clear_counterparty(&mut self) {
        self.counterparty.clear();
    }

    pub fn has_counterparty(&self) -> bool {
        self.counterparty.is_some()
    }

    // Param is passed by value, moved
    pub fn set_counterparty(&mut self, v: Counterparty) {
        self.counterparty = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_counterparty(&mut self) -> &mut Counterparty {
        if self.counterparty.is_none() {
            self.counterparty.set_default();
        }
        self.counterparty.as_mut().unwrap()
    }

    // Take field
    pub fn take_counterparty(&mut self) -> Counterparty {
        self.counterparty.take().unwrap_or_else(|| Counterparty::new())
    }

    // repeated string connection_hops = 4;


    pub fn get_connection_hops(&self) -> &[::std::string::String] {
        &self.connection_hops
    }
    pub fn clear_connection_hops(&mut self) {
        self.connection_hops.clear();
    }

    // Param is passed by value, moved
    pub fn set_connection_hops(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.connection_hops = v;
    }

    // Mutable pointer to the field.
    pub fn mut_connection_hops(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.connection_hops
    }

    // Take field
    pub fn take_connection_hops(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.connection_hops, ::protobuf::RepeatedField::new())
    }

    // string version = 5;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string port_id = 6;


    pub fn get_port_id(&self) -> &str {
        &self.port_id
    }
    pub fn clear_port_id(&mut self) {
        self.port_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_port_id(&mut self, v: ::std::string::String) {
        self.port_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port_id(&mut self) -> &mut ::std::string::String {
        &mut self.port_id
    }

    // Take field
    pub fn take_port_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.port_id, ::std::string::String::new())
    }

    // string channel_id = 7;


    pub fn get_channel_id(&self) -> &str {
        &self.channel_id
    }
    pub fn clear_channel_id(&mut self) {
        self.channel_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: ::std::string::String) {
        self.channel_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_id(&mut self) -> &mut ::std::string::String {
        &mut self.channel_id
    }

    // Take field
    pub fn take_channel_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.channel_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for IdentifiedChannel {
    fn is_initialized(&self) -> bool {
        for v in &self.counterparty {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.ordering, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.counterparty)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.connection_hops)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.port_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != State::STATE_UNINITIALIZED_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if self.ordering != Order::ORDER_NONE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.ordering);
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.connection_hops {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version);
        }
        if !self.port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.port_id);
        }
        if !self.channel_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.channel_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != State::STATE_UNINITIALIZED_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if self.ordering != Order::ORDER_NONE_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.ordering))?;
        }
        if let Some(ref v) = self.counterparty.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.connection_hops {
            os.write_string(4, &v)?;
        };
        if !self.version.is_empty() {
            os.write_string(5, &self.version)?;
        }
        if !self.port_id.is_empty() {
            os.write_string(6, &self.port_id)?;
        }
        if !self.channel_id.is_empty() {
            os.write_string(7, &self.channel_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IdentifiedChannel {
        IdentifiedChannel::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<State>>(
                "state",
                |m: &IdentifiedChannel| { &m.state },
                |m: &mut IdentifiedChannel| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Order>>(
                "ordering",
                |m: &IdentifiedChannel| { &m.ordering },
                |m: &mut IdentifiedChannel| { &mut m.ordering },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Counterparty>>(
                "counterparty",
                |m: &IdentifiedChannel| { &m.counterparty },
                |m: &mut IdentifiedChannel| { &mut m.counterparty },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "connection_hops",
                |m: &IdentifiedChannel| { &m.connection_hops },
                |m: &mut IdentifiedChannel| { &mut m.connection_hops },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &IdentifiedChannel| { &m.version },
                |m: &mut IdentifiedChannel| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "port_id",
                |m: &IdentifiedChannel| { &m.port_id },
                |m: &mut IdentifiedChannel| { &mut m.port_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "channel_id",
                |m: &IdentifiedChannel| { &m.channel_id },
                |m: &mut IdentifiedChannel| { &mut m.channel_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IdentifiedChannel>(
                "IdentifiedChannel",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IdentifiedChannel {
        static instance: ::protobuf::rt::LazyV2<IdentifiedChannel> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IdentifiedChannel::new)
    }
}

impl ::protobuf::Clear for IdentifiedChannel {
    fn clear(&mut self) {
        self.state = State::STATE_UNINITIALIZED_UNSPECIFIED;
        self.ordering = Order::ORDER_NONE_UNSPECIFIED;
        self.counterparty.clear();
        self.connection_hops.clear();
        self.version.clear();
        self.port_id.clear();
        self.channel_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IdentifiedChannel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentifiedChannel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Counterparty {
    // message fields
    pub port_id: ::std::string::String,
    pub channel_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Counterparty {
    fn default() -> &'a Counterparty {
        <Counterparty as ::protobuf::Message>::default_instance()
    }
}

impl Counterparty {
    pub fn new() -> Counterparty {
        ::std::default::Default::default()
    }

    // string port_id = 1;


    pub fn get_port_id(&self) -> &str {
        &self.port_id
    }
    pub fn clear_port_id(&mut self) {
        self.port_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_port_id(&mut self, v: ::std::string::String) {
        self.port_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port_id(&mut self) -> &mut ::std::string::String {
        &mut self.port_id
    }

    // Take field
    pub fn take_port_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.port_id, ::std::string::String::new())
    }

    // string channel_id = 2;


    pub fn get_channel_id(&self) -> &str {
        &self.channel_id
    }
    pub fn clear_channel_id(&mut self) {
        self.channel_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: ::std::string::String) {
        self.channel_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_id(&mut self) -> &mut ::std::string::String {
        &mut self.channel_id
    }

    // Take field
    pub fn take_channel_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.channel_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Counterparty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.port_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.port_id);
        }
        if !self.channel_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.channel_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.port_id.is_empty() {
            os.write_string(1, &self.port_id)?;
        }
        if !self.channel_id.is_empty() {
            os.write_string(2, &self.channel_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Counterparty {
        Counterparty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "port_id",
                |m: &Counterparty| { &m.port_id },
                |m: &mut Counterparty| { &mut m.port_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "channel_id",
                |m: &Counterparty| { &m.channel_id },
                |m: &mut Counterparty| { &mut m.channel_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Counterparty>(
                "Counterparty",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Counterparty {
        static instance: ::protobuf::rt::LazyV2<Counterparty> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Counterparty::new)
    }
}

impl ::protobuf::Clear for Counterparty {
    fn clear(&mut self) {
        self.port_id.clear();
        self.channel_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Counterparty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Counterparty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Packet {
    // message fields
    pub sequence: u64,
    pub source_port: ::std::string::String,
    pub source_channel: ::std::string::String,
    pub destination_port: ::std::string::String,
    pub destination_channel: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    pub timeout_height: ::protobuf::SingularPtrField<super::client::Height>,
    pub timeout_timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Packet {
    fn default() -> &'a Packet {
        <Packet as ::protobuf::Message>::default_instance()
    }
}

impl Packet {
    pub fn new() -> Packet {
        ::std::default::Default::default()
    }

    // uint64 sequence = 1;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    // string source_port = 2;


    pub fn get_source_port(&self) -> &str {
        &self.source_port
    }
    pub fn clear_source_port(&mut self) {
        self.source_port.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_port(&mut self, v: ::std::string::String) {
        self.source_port = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_port(&mut self) -> &mut ::std::string::String {
        &mut self.source_port
    }

    // Take field
    pub fn take_source_port(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_port, ::std::string::String::new())
    }

    // string source_channel = 3;


    pub fn get_source_channel(&self) -> &str {
        &self.source_channel
    }
    pub fn clear_source_channel(&mut self) {
        self.source_channel.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_channel(&mut self, v: ::std::string::String) {
        self.source_channel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_channel(&mut self) -> &mut ::std::string::String {
        &mut self.source_channel
    }

    // Take field
    pub fn take_source_channel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_channel, ::std::string::String::new())
    }

    // string destination_port = 4;


    pub fn get_destination_port(&self) -> &str {
        &self.destination_port
    }
    pub fn clear_destination_port(&mut self) {
        self.destination_port.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination_port(&mut self, v: ::std::string::String) {
        self.destination_port = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_port(&mut self) -> &mut ::std::string::String {
        &mut self.destination_port
    }

    // Take field
    pub fn take_destination_port(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.destination_port, ::std::string::String::new())
    }

    // string destination_channel = 5;


    pub fn get_destination_channel(&self) -> &str {
        &self.destination_channel
    }
    pub fn clear_destination_channel(&mut self) {
        self.destination_channel.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination_channel(&mut self, v: ::std::string::String) {
        self.destination_channel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_channel(&mut self) -> &mut ::std::string::String {
        &mut self.destination_channel
    }

    // Take field
    pub fn take_destination_channel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.destination_channel, ::std::string::String::new())
    }

    // bytes data = 6;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // .ibc.core.client.v1.Height timeout_height = 7;


    pub fn get_timeout_height(&self) -> &super::client::Height {
        self.timeout_height.as_ref().unwrap_or_else(|| <super::client::Height as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timeout_height(&mut self) {
        self.timeout_height.clear();
    }

    pub fn has_timeout_height(&self) -> bool {
        self.timeout_height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout_height(&mut self, v: super::client::Height) {
        self.timeout_height = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timeout_height(&mut self) -> &mut super::client::Height {
        if self.timeout_height.is_none() {
            self.timeout_height.set_default();
        }
        self.timeout_height.as_mut().unwrap()
    }

    // Take field
    pub fn take_timeout_height(&mut self) -> super::client::Height {
        self.timeout_height.take().unwrap_or_else(|| super::client::Height::new())
    }

    // uint64 timeout_timestamp = 8;


    pub fn get_timeout_timestamp(&self) -> u64 {
        self.timeout_timestamp
    }
    pub fn clear_timeout_timestamp(&mut self) {
        self.timeout_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout_timestamp(&mut self, v: u64) {
        self.timeout_timestamp = v;
    }
}

impl ::protobuf::Message for Packet {
    fn is_initialized(&self) -> bool {
        for v in &self.timeout_height {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source_port)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source_channel)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.destination_port)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.destination_channel)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timeout_height)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timeout_timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(1, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.source_port.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source_port);
        }
        if !self.source_channel.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.source_channel);
        }
        if !self.destination_port.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.destination_port);
        }
        if !self.destination_channel.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.destination_channel);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.data);
        }
        if let Some(ref v) = self.timeout_height.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.timeout_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(8, self.timeout_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sequence != 0 {
            os.write_uint64(1, self.sequence)?;
        }
        if !self.source_port.is_empty() {
            os.write_string(2, &self.source_port)?;
        }
        if !self.source_channel.is_empty() {
            os.write_string(3, &self.source_channel)?;
        }
        if !self.destination_port.is_empty() {
            os.write_string(4, &self.destination_port)?;
        }
        if !self.destination_channel.is_empty() {
            os.write_string(5, &self.destination_channel)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(6, &self.data)?;
        }
        if let Some(ref v) = self.timeout_height.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.timeout_timestamp != 0 {
            os.write_uint64(8, self.timeout_timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Packet {
        Packet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &Packet| { &m.sequence },
                |m: &mut Packet| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "source_port",
                |m: &Packet| { &m.source_port },
                |m: &mut Packet| { &mut m.source_port },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "source_channel",
                |m: &Packet| { &m.source_channel },
                |m: &mut Packet| { &mut m.source_channel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "destination_port",
                |m: &Packet| { &m.destination_port },
                |m: &mut Packet| { &mut m.destination_port },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "destination_channel",
                |m: &Packet| { &m.destination_channel },
                |m: &mut Packet| { &mut m.destination_channel },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &Packet| { &m.data },
                |m: &mut Packet| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::client::Height>>(
                "timeout_height",
                |m: &Packet| { &m.timeout_height },
                |m: &mut Packet| { &mut m.timeout_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timeout_timestamp",
                |m: &Packet| { &m.timeout_timestamp },
                |m: &mut Packet| { &mut m.timeout_timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Packet>(
                "Packet",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Packet {
        static instance: ::protobuf::rt::LazyV2<Packet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Packet::new)
    }
}

impl ::protobuf::Clear for Packet {
    fn clear(&mut self) {
        self.sequence = 0;
        self.source_port.clear();
        self.source_channel.clear();
        self.destination_port.clear();
        self.destination_channel.clear();
        self.data.clear();
        self.timeout_height.clear();
        self.timeout_timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Packet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Packet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PacketState {
    // message fields
    pub port_id: ::std::string::String,
    pub channel_id: ::std::string::String,
    pub sequence: u64,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PacketState {
    fn default() -> &'a PacketState {
        <PacketState as ::protobuf::Message>::default_instance()
    }
}

impl PacketState {
    pub fn new() -> PacketState {
        ::std::default::Default::default()
    }

    // string port_id = 1;


    pub fn get_port_id(&self) -> &str {
        &self.port_id
    }
    pub fn clear_port_id(&mut self) {
        self.port_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_port_id(&mut self, v: ::std::string::String) {
        self.port_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port_id(&mut self) -> &mut ::std::string::String {
        &mut self.port_id
    }

    // Take field
    pub fn take_port_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.port_id, ::std::string::String::new())
    }

    // string channel_id = 2;


    pub fn get_channel_id(&self) -> &str {
        &self.channel_id
    }
    pub fn clear_channel_id(&mut self) {
        self.channel_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: ::std::string::String) {
        self.channel_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_id(&mut self) -> &mut ::std::string::String {
        &mut self.channel_id
    }

    // Take field
    pub fn take_channel_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.channel_id, ::std::string::String::new())
    }

    // uint64 sequence = 3;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    // bytes data = 4;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PacketState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.port_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.port_id);
        }
        if !self.channel_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.channel_id);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.port_id.is_empty() {
            os.write_string(1, &self.port_id)?;
        }
        if !self.channel_id.is_empty() {
            os.write_string(2, &self.channel_id)?;
        }
        if self.sequence != 0 {
            os.write_uint64(3, self.sequence)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PacketState {
        PacketState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "port_id",
                |m: &PacketState| { &m.port_id },
                |m: &mut PacketState| { &mut m.port_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "channel_id",
                |m: &PacketState| { &m.channel_id },
                |m: &mut PacketState| { &mut m.channel_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &PacketState| { &m.sequence },
                |m: &mut PacketState| { &mut m.sequence },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &PacketState| { &m.data },
                |m: &mut PacketState| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PacketState>(
                "PacketState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PacketState {
        static instance: ::protobuf::rt::LazyV2<PacketState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PacketState::new)
    }
}

impl ::protobuf::Clear for PacketState {
    fn clear(&mut self) {
        self.port_id.clear();
        self.channel_id.clear();
        self.sequence = 0;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PacketState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PacketId {
    // message fields
    pub port_id: ::std::string::String,
    pub channel_id: ::std::string::String,
    pub sequence: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PacketId {
    fn default() -> &'a PacketId {
        <PacketId as ::protobuf::Message>::default_instance()
    }
}

impl PacketId {
    pub fn new() -> PacketId {
        ::std::default::Default::default()
    }

    // string port_id = 1;


    pub fn get_port_id(&self) -> &str {
        &self.port_id
    }
    pub fn clear_port_id(&mut self) {
        self.port_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_port_id(&mut self, v: ::std::string::String) {
        self.port_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port_id(&mut self) -> &mut ::std::string::String {
        &mut self.port_id
    }

    // Take field
    pub fn take_port_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.port_id, ::std::string::String::new())
    }

    // string channel_id = 2;


    pub fn get_channel_id(&self) -> &str {
        &self.channel_id
    }
    pub fn clear_channel_id(&mut self) {
        self.channel_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: ::std::string::String) {
        self.channel_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_id(&mut self) -> &mut ::std::string::String {
        &mut self.channel_id
    }

    // Take field
    pub fn take_channel_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.channel_id, ::std::string::String::new())
    }

    // uint64 sequence = 3;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }
}

impl ::protobuf::Message for PacketId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.port_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.channel_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.port_id);
        }
        if !self.channel_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.channel_id);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.port_id.is_empty() {
            os.write_string(1, &self.port_id)?;
        }
        if !self.channel_id.is_empty() {
            os.write_string(2, &self.channel_id)?;
        }
        if self.sequence != 0 {
            os.write_uint64(3, self.sequence)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PacketId {
        PacketId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "port_id",
                |m: &PacketId| { &m.port_id },
                |m: &mut PacketId| { &mut m.port_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "channel_id",
                |m: &PacketId| { &m.channel_id },
                |m: &mut PacketId| { &mut m.channel_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sequence",
                |m: &PacketId| { &m.sequence },
                |m: &mut PacketId| { &mut m.sequence },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PacketId>(
                "PacketId",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PacketId {
        static instance: ::protobuf::rt::LazyV2<PacketId> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PacketId::new)
    }
}

impl ::protobuf::Clear for PacketId {
    fn clear(&mut self) {
        self.port_id.clear();
        self.channel_id.clear();
        self.sequence = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PacketId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketId {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Acknowledgement {
    // message oneof groups
    pub response: ::std::option::Option<Acknowledgement_oneof_response>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Acknowledgement {
    fn default() -> &'a Acknowledgement {
        <Acknowledgement as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Acknowledgement_oneof_response {
    result(::std::vec::Vec<u8>),
    error(::std::string::String),
}

impl Acknowledgement {
    pub fn new() -> Acknowledgement {
        ::std::default::Default::default()
    }

    // bytes result = 21;


    pub fn get_result(&self) -> &[u8] {
        match self.response {
            ::std::option::Option::Some(Acknowledgement_oneof_response::result(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_result(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(Acknowledgement_oneof_response::result(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::std::vec::Vec<u8>) {
        self.response = ::std::option::Option::Some(Acknowledgement_oneof_response::result(v))
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Acknowledgement_oneof_response::result(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(Acknowledgement_oneof_response::result(::std::vec::Vec::new()));
        }
        match self.response {
            ::std::option::Option::Some(Acknowledgement_oneof_response::result(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_result(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_result() {
            match self.response.take() {
                ::std::option::Option::Some(Acknowledgement_oneof_response::result(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // string error = 22;


    pub fn get_error(&self) -> &str {
        match self.response {
            ::std::option::Option::Some(Acknowledgement_oneof_response::error(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_error(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_error(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(Acknowledgement_oneof_response::error(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.response = ::std::option::Option::Some(Acknowledgement_oneof_response::error(v))
    }

    // Mutable pointer to the field.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Acknowledgement_oneof_response::error(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(Acknowledgement_oneof_response::error(::std::string::String::new()));
        }
        match self.response {
            ::std::option::Option::Some(Acknowledgement_oneof_response::error(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        if self.has_error() {
            match self.response.take() {
                ::std::option::Option::Some(Acknowledgement_oneof_response::error(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for Acknowledgement {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(Acknowledgement_oneof_response::result(is.read_bytes()?));
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(Acknowledgement_oneof_response::error(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &Acknowledgement_oneof_response::result(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(21, &v);
                },
                &Acknowledgement_oneof_response::error(ref v) => {
                    my_size += ::protobuf::rt::string_size(22, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &Acknowledgement_oneof_response::result(ref v) => {
                    os.write_bytes(21, v)?;
                },
                &Acknowledgement_oneof_response::error(ref v) => {
                    os.write_string(22, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Acknowledgement {
        Acknowledgement::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "result",
                Acknowledgement::has_result,
                Acknowledgement::get_result,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "error",
                Acknowledgement::has_error,
                Acknowledgement::get_error,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Acknowledgement>(
                "Acknowledgement",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Acknowledgement {
        static instance: ::protobuf::rt::LazyV2<Acknowledgement> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Acknowledgement::new)
    }
}

impl ::protobuf::Clear for Acknowledgement {
    fn clear(&mut self) {
        self.response = ::std::option::Option::None;
        self.response = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Acknowledgement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Acknowledgement {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum State {
    STATE_UNINITIALIZED_UNSPECIFIED = 0,
    STATE_INIT = 1,
    STATE_TRYOPEN = 2,
    STATE_OPEN = 3,
    STATE_CLOSED = 4,
}

impl ::protobuf::ProtobufEnum for State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<State> {
        match value {
            0 => ::std::option::Option::Some(State::STATE_UNINITIALIZED_UNSPECIFIED),
            1 => ::std::option::Option::Some(State::STATE_INIT),
            2 => ::std::option::Option::Some(State::STATE_TRYOPEN),
            3 => ::std::option::Option::Some(State::STATE_OPEN),
            4 => ::std::option::Option::Some(State::STATE_CLOSED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [State] = &[
            State::STATE_UNINITIALIZED_UNSPECIFIED,
            State::STATE_INIT,
            State::STATE_TRYOPEN,
            State::STATE_OPEN,
            State::STATE_CLOSED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<State>("State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for State {
}

impl ::std::default::Default for State {
    fn default() -> Self {
        State::STATE_UNINITIALIZED_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Order {
    ORDER_NONE_UNSPECIFIED = 0,
    ORDER_UNORDERED = 1,
    ORDER_ORDERED = 2,
}

impl ::protobuf::ProtobufEnum for Order {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Order> {
        match value {
            0 => ::std::option::Option::Some(Order::ORDER_NONE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Order::ORDER_UNORDERED),
            2 => ::std::option::Option::Some(Order::ORDER_ORDERED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Order] = &[
            Order::ORDER_NONE_UNSPECIFIED,
            Order::ORDER_UNORDERED,
            Order::ORDER_ORDERED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Order>("Order", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Order {
}

impl ::std::default::Default for Order {
    fn default() -> Self {
        Order::ORDER_NONE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Order {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!ibc/core/channel/v1/channel.proto\x12\x13ibc.core.channel.v1\x1a\x14g\
    ogoproto/gogo.proto\x1a\x1fibc/core/client/v1/client.proto\"\xa5\x02\n\
    \x07Channel\x120\n\x05state\x18\x01\x20\x01(\x0e2\x1a.ibc.core.channel.v\
    1.StateR\x05state\x126\n\x08ordering\x18\x02\x20\x01(\x0e2\x1a.ibc.core.\
    channel.v1.OrderR\x08ordering\x12K\n\x0ccounterparty\x18\x03\x20\x01(\
    \x0b2!.ibc.core.channel.v1.CounterpartyR\x0ccounterpartyB\x04\xc8\xde\
    \x1f\0\x12C\n\x0fconnection_hops\x18\x04\x20\x03(\tR\x0econnectionHopsB\
    \x1a\xf2\xde\x1f\x16yaml:\"connection_hops\"\x12\x18\n\x07version\x18\
    \x05\x20\x01(\tR\x07version:\x04\x88\xa0\x1f\0\"\xe7\x02\n\x11Identified\
    Channel\x120\n\x05state\x18\x01\x20\x01(\x0e2\x1a.ibc.core.channel.v1.St\
    ateR\x05state\x126\n\x08ordering\x18\x02\x20\x01(\x0e2\x1a.ibc.core.chan\
    nel.v1.OrderR\x08ordering\x12K\n\x0ccounterparty\x18\x03\x20\x01(\x0b2!.\
    ibc.core.channel.v1.CounterpartyR\x0ccounterpartyB\x04\xc8\xde\x1f\0\x12\
    C\n\x0fconnection_hops\x18\x04\x20\x03(\tR\x0econnectionHopsB\x1a\xf2\
    \xde\x1f\x16yaml:\"connection_hops\"\x12\x18\n\x07version\x18\x05\x20\
    \x01(\tR\x07version\x12\x17\n\x07port_id\x18\x06\x20\x01(\tR\x06portId\
    \x12\x1d\n\nchannel_id\x18\x07\x20\x01(\tR\tchannelId:\x04\x88\xa0\x1f\0\
    \"w\n\x0cCounterparty\x12+\n\x07port_id\x18\x01\x20\x01(\tR\x06portIdB\
    \x12\xf2\xde\x1f\x0eyaml:\"port_id\"\x124\n\nchannel_id\x18\x02\x20\x01(\
    \tR\tchannelIdB\x15\xf2\xde\x1f\x11yaml:\"channel_id\":\x04\x88\xa0\x1f\
    \0\"\xff\x03\n\x06Packet\x12\x1a\n\x08sequence\x18\x01\x20\x01(\x04R\x08\
    sequence\x127\n\x0bsource_port\x18\x02\x20\x01(\tR\nsourcePortB\x16\xf2\
    \xde\x1f\x12yaml:\"source_port\"\x12@\n\x0esource_channel\x18\x03\x20\
    \x01(\tR\rsourceChannelB\x19\xf2\xde\x1f\x15yaml:\"source_channel\"\x12F\
    \n\x10destination_port\x18\x04\x20\x01(\tR\x0fdestinationPortB\x1b\xf2\
    \xde\x1f\x17yaml:\"destination_port\"\x12O\n\x13destination_channel\x18\
    \x05\x20\x01(\tR\x12destinationChannelB\x1e\xf2\xde\x1f\x1ayaml:\"destin\
    ation_channel\"\x12\x12\n\x04data\x18\x06\x20\x01(\x0cR\x04data\x12`\n\
    \x0etimeout_height\x18\x07\x20\x01(\x0b2\x1a.ibc.core.client.v1.HeightR\
    \rtimeoutHeightB\x1d\xf2\xde\x1f\x15yaml:\"timeout_height\"\xc8\xde\x1f\
    \0\x12I\n\x11timeout_timestamp\x18\x08\x20\x01(\x04R\x10timeoutTimestamp\
    B\x1c\xf2\xde\x1f\x18yaml:\"timeout_timestamp\":\x04\x88\xa0\x1f\0\"\xa6\
    \x01\n\x0bPacketState\x12+\n\x07port_id\x18\x01\x20\x01(\tR\x06portIdB\
    \x12\xf2\xde\x1f\x0eyaml:\"port_id\"\x124\n\nchannel_id\x18\x02\x20\x01(\
    \tR\tchannelIdB\x15\xf2\xde\x1f\x11yaml:\"channel_id\"\x12\x1a\n\x08sequ\
    ence\x18\x03\x20\x01(\x04R\x08sequence\x12\x12\n\x04data\x18\x04\x20\x01\
    (\x0cR\x04data:\x04\x88\xa0\x1f\0\"\x8f\x01\n\x08PacketId\x12+\n\x07port\
    _id\x18\x01\x20\x01(\tR\x06portIdB\x12\xf2\xde\x1f\x0eyaml:\"port_id\"\
    \x124\n\nchannel_id\x18\x02\x20\x01(\tR\tchannelIdB\x15\xf2\xde\x1f\x11y\
    aml:\"channel_id\"\x12\x1a\n\x08sequence\x18\x03\x20\x01(\x04R\x08sequen\
    ce:\x04\x88\xa0\x1f\0\"O\n\x0fAcknowledgement\x12\x18\n\x06result\x18\
    \x15\x20\x01(\x0cH\0R\x06result\x12\x16\n\x05error\x18\x16\x20\x01(\tH\0\
    R\x05errorB\n\n\x08response*\xb7\x01\n\x05State\x126\n\x1fSTATE_UNINITIA\
    LIZED_UNSPECIFIED\x10\0\x1a\x11\x8a\x9d\x20\rUNINITIALIZED\x12\x18\n\nST\
    ATE_INIT\x10\x01\x1a\x08\x8a\x9d\x20\x04INIT\x12\x1e\n\rSTATE_TRYOPEN\
    \x10\x02\x1a\x0b\x8a\x9d\x20\x07TRYOPEN\x12\x18\n\nSTATE_OPEN\x10\x03\
    \x1a\x08\x8a\x9d\x20\x04OPEN\x12\x1c\n\x0cSTATE_CLOSED\x10\x04\x1a\n\x8a\
    \x9d\x20\x06CLOSED\x1a\x04\x88\xa3\x1e\0*w\n\x05Order\x12$\n\x16ORDER_NO\
    NE_UNSPECIFIED\x10\0\x1a\x08\x8a\x9d\x20\x04NONE\x12\"\n\x0fORDER_UNORDE\
    RED\x10\x01\x1a\r\x8a\x9d\x20\tUNORDERED\x12\x1e\n\rORDER_ORDERED\x10\
    \x02\x1a\x0b\x8a\x9d\x20\x07ORDERED\x1a\x04\x88\xa3\x1e\0B;Z9github.com/\
    cosmos/ibc-go/v4/modules/core/04-channel/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
